using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Drawing;
namespace Platformer2D.Generator
{
    public static class GeneratorModel 
    {
        public static int GetScorePerCrystal(int locationIndex, int _difficulty)
        {
            switch (locationIndex)
            {
                case 1:
                    return (int)(1+ 0.1f *_difficulty);
                case 2:
                    return (int)(2+ 0.1f *_difficulty);
                case 3:
                    return (int)(3+ 0.1f *_difficulty);
                default:
                    return 0;
            }
        }
        public static int GetCountCrystal(int locationIndex, int _difficulty)
        {
            switch (locationIndex)
            {
                case 1:
                    return (int)(UnityEngine.Random.Range(20,30) * (1+ 0.1f *_difficulty));
                case 2:
                    return (int)(UnityEngine.Random.Range(30,50) * (1+ 0.1f *_difficulty));
                case 3:
                    return (int)(UnityEngine.Random.Range(50,55) * (1+ 0.1f *_difficulty));
                default:
                    return 0;
            }
        }

        public static int GetTargetScore(int _difficulty)
        {
            switch (_difficulty)
            {
                case 1:
                    return 60;
                case 2:
                    return 70;
                case 3:
                    return 85;
                default:
                    return 0;
            }
        }

        public static int GetTargetCountForOpenPercent(int _difficulty)
        {
            switch (_difficulty)
            {
                case 1:
                    return 20;
                case 2:
                    return 30;
                case 3:
                    return 50;
                default:
                    return 0;
            }
        }

        public static float GetPercentCountSpecialPlatform(int _difficulty)
        {
            switch (_difficulty)
            {
                case 1:
                    return 0.1f;
                case 2:
                    return 0.2f;
                case 3:
                    return 0.3f;
                default:
                    return 0;
            }
        }

        public static Size GenerateLocationSize()
        {
            var random = new System.Random();
            return new Size
            {
                Width = random.Next(15, 20), // Генерирует случайное число от 500 до 900 включительно
                Height = random.Next(10, 20) // Генерирует случайное число от 500 до 700 включительно
            };
        }
    }
}

/*
Сделать формулу, которая будет вычислять, является ли игра проходимой - это поместить после в отчёт в раздел юзабилити тестирования

В зависимости от типа сложности из комнаты можно попасть в  N количество дверей. 
Всего есть K локаций. 
Чтобы открыть дверь нужно M кристаллов
На одной локации можно собрать до 2.2M кристаллов

Напиши мне формулу доказательство того, что игра проходима, если точка выхода всегда находится на нулевой локации. При этом установи, сколько может быть открыто дверей всего (количество открытых дверей определяет также уровень сложности. При наборе определенного количества дверей становится доступным прохождение игры)

Игра является гарантированнно проходимой, но не все комнаты могут быть посещены, если игрок неоптимально распределит кристаллы.

Для того, чтобы доказать, что игра проходима, можно использовать следующую формулу:

Общее количество кристаллов: Пусть C - это общее количество кристаллов, которое можно собрать в игре. Если на одной локации можно собрать до 2.2M кристаллов, и всего есть K локаций, то C = 2.2M * K.
Общее количество дверей: Пусть D - это общее количество дверей в игре. Если из каждой комнаты можно попасть в N количество дверей, и всего есть K локаций, то D = N * K.
Количество кристаллов для открытия всех дверей: Пусть T - это общее количество кристаллов, необходимых для открытия всех дверей. Если для открытия одной двери требуется M кристаллов, и всего есть D дверей, то T = M * D.
Теперь, если C >= T, то игра проходима, потому что общее количество кристаллов, которое можно собрать в игре, больше или равно общему количеству кристаллов, необходимых для открытия всех дверей.

Что касается количества открытых дверей, которое определяет уровень сложности, то можно использовать следующую формулу:

Количество открытых дверей: Пусть O - это количество открытых дверей. Если игрок собрал X кристаллов, и для открытия одной двери требуется M кристаллов, то O = X / M.
Это означает, что количество открытых дверей зависит от количества собранных игроком кристаллов и количества кристаллов, необходимых для открытия одной двери.

Уровень сложности: Уровень сложности может быть определен как функция от количества открытых дверей. 
Например, если O >= D, то игра проходима, потому что количество открытых дверей больше или равно общему количеству дверей.
 Если O < D, то уровень сложности игры увеличивается, так как игроку придется более тщательно выбирать, какие двери открывать.


Оптимальное распределение кристаллов: Игрок должен стремиться к оптимальному распределению кристаллов,
 чтобы максимизировать количество открытых дверей.
  Это может быть достигнуто путем выбора дверей, которые ведут к комнатам с большим количеством кристаллов, 
  или путем сохранения кристаллов для открытия дверей в более сложных комнатах.
*/

