using System.Collections.Generic;
using UnityEngine;

public class Generator : MonoBehaviour
{
    public Vector2 labelSize = new Vector2(2, 1);
    public int gridSize = 500;
    public int pointCount = 60;

    public void Start()
    {
        var regions = RecursiveBinarySpacePartition(new Rect(0, 0, gridSize, gridSize), 4, true);
        var platforms = new List<Vector3>();
        foreach (var region in regions)
        {
            var regionPlatforms = GridBasedPlatformPlacementWithoutIntersection(pointCount, (int)region.width, labelSize, region);
            platforms.AddRange(regionPlatforms);
        }
        foreach (var platform in platforms)
        {
            Debug.Log($"Platform at: {platform}");
            // Здесь вы можете добавить код для размещения платформы на позиции platform
        }
    }

    public List<Rect> RecursiveBinarySpacePartition(Rect area, int depth, bool horizontal)
    {
        var regions = new List<Rect>();
        if (depth == 0)
        {
            regions.Add(area);
        }
        else
        {
            var split = Random.Range(0.4f, 0.6f); // Случайное разбиение пространства
            Rect first, second;
            if (horizontal)
            {
                first = new Rect(area.x, area.y, area.width * split, area.height);
                second = new Rect(area.x + area.width * split, area.y, area.width * (1 - split), area.height);
            }
            else
            {
                first = new Rect(area.x, area.y, area.width, area.height * split);
                second = new Rect(area.x, area.y + area.height * split, area.width, area.height * (1 - split));
            }
            regions.AddRange(RecursiveBinarySpacePartition(first, depth - 1, !horizontal));
            regions.AddRange(RecursiveBinarySpacePartition(second, depth - 1, !horizontal));
        }
        return regions;
    }

    public List<Vector3> GridBasedPlatformPlacementWithoutIntersection(int pointCount, int gridSize, Vector2 labelSize, Rect region)
    {
        var platforms = new List<Vector3>();
        for (int i = 0; i < pointCount; i++)
        {
            // Генерация случайной точки в пределах сетки
            var point = new Vector2(Random.Range(region.x, region.xMax), Random.Range(region.y, region.yMax));
            // Размещение платформы рядом с точкой
            var platformX = point.x - labelSize.x / 2;
            var platformY = point.y - labelSize.y / 2;

            // Проверка на пересечение платформы с уже существующими платформами
            bool intersects = false;
            foreach (var platform in platforms)
            {
                if (platformX < platform.x + labelSize.x && platformX + labelSize.x > platform.x &&
                    platformY < platform.y + labelSize.y && platformY + labelSize.y > platform.y)
                {
                    intersects = true;
                    break;
                }
            }

            // Если платформа не пересекается, она добавляется в список платформ
            if (!intersects)
            {
                platforms.Add(new Vector3(platformX, platformY, 0));
            }
        }
        return platforms;
    }
}


using QuikGraph;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Generator 
{
    internal class Program
    {
        public static void Main()
        {
            int n = 10;  // Общее количество вершин
            int m = 1;   // Количество начальных вершин
            var G2 = BarabasiAlbertGraph(n, m);
            Console.WriteLine("Vertices: " + string.Join(", ", G2.Vertices));
            Console.WriteLine("Edges: " + string.Join(", ", G2.Edges.Select(e => $"({e.Source}, {e.Target})")));
            Console.WriteLine("=============");
            Console.WriteLine("=============");
            // Генерируем информацию о комнатах и переходах между ними
            Console.WriteLine("Location: ['A', 'B', 'C', 'D']");
            var G3 = AssignRoomsToNodes(G2, new List<string> { "A", "B", "C", "D" });
            var (rooms, transitions) = GenerateRoomsAndTransitions(G3);
            PrintGraphInfo(rooms, transitions);
        }

        public static UndirectedGraph<int, Edge<int>> BarabasiAlbertGraph(int n, int m)
        {
            var G = new UndirectedGraph<int, Edge<int>>();
            var targetList = new List<int>();
            var random = new Random();

            // Создание полного граф с m начальными узлами
            for (int i = 0; i < m; i++)
            {
                G.AddVertex(i);
                for (int j = 0; j < i; j++)
                {
                    G.AddEdge(new Edge<int>(i, j));
                }
                targetList.AddRange(Enumerable.Repeat(i, m));
            }

            // Добавление оставшихся узлов
            for (int i = m; i < n; i++)
            {
                G.AddVertex(i);
                var targets = targetList.OrderBy(x => random.Next()).Take(m).ToList();
                foreach (var target in targets)
                {
                    G.AddEdge(new Edge<int>(i, target));
                }
                targetList.AddRange(targets);
                targetList.AddRange(Enumerable.Repeat(i, m));
            }

            return G;
        }

        public static UndirectedGraph<string, Edge<string>> AssignRoomsToNodes(UndirectedGraph<int, Edge<int>> graph, List<string> roomNames)
        {
            var random = new Random();
            var mapping = graph.Vertices.ToDictionary(
                node => node,
                node => $"Level {node + 1}: {roomNames[random.Next(roomNames.Count)]}"
            );

            var newGraph = new UndirectedGraph<string, Edge<string>>();
            foreach (var edge in graph.Edges)
            {
                newGraph.AddVerticesAndEdge(new Edge<string>(mapping[edge.Source], mapping[edge.Target]));
            }
            return newGraph;
        }

        public static (List<string>, Dictionary<string, List<string>>) GenerateRoomsAndTransitions(UndirectedGraph<string, Edge<string>> graph)
        {
            var rooms = graph.Vertices.ToList();
            var transitions = rooms.ToDictionary(room => room, room => new List<string>());
            foreach (var edge in graph.Edges)
            {
                transitions[edge.Source].Add(edge.Target);
                transitions[edge.Target].Add(edge.Source);
            }
            return (rooms, transitions);
        }

        public static void PrintGraphInfo(List<string> rooms, Dictionary<string, List<string>> transitions)
        {
            Console.WriteLine("Levels:");
            foreach (var room in rooms)
            {
                Console.WriteLine(room);
            }

            Console.WriteLine("\nPrexod:");
            foreach (var (room, transitionRooms) in transitions)
            {
                Console.WriteLine($"{room} -> {string.Join(", ", transitionRooms)}");
            }
        }
    }
}


using System.Collections.Generic;
using UnityEngine;

public class Generator : MonoBehaviour
{
    public int width = 100;
    public int height = 100;
    public float radius = 5;
    public int numSamples = 30;
    public int relaxationSteps = 5;

    public void Start()
    {
        var samples = GeneratePoissonDiskSamples(width, height, radius, numSamples, relaxationSteps);
        foreach (var sample in samples)
        {
            Debug.Log($"Sample at: {sample}");
            // Здесь вы можете добавить код для размещения объекта кристалла на позиции sample
        }
    }

    public List<Vector3> GeneratePoissonDiskSamples(int width, int height, float radius, int numSamples, int relaxationSteps)
    {
        var samples = new List<Vector3>();
        for (int i = 0; i < numSamples; i++)
        {
            // Генерация случайной точки в пределах сетки
            var point = new Vector3(Random.Range(0, width), Random.Range(0, height), 0);
            samples.Add(point);
        }

        for (int _ = 0; _ < relaxationSteps; _++)
        {
            var newSamples = new List<Vector3>();
            foreach (var sample in samples)
            {
                // Находим ближайшую точку
                Vector3 nearest = FindNearest(sample, samples);
                // Вычисляем направление от текущей точки к ближайшей
                Vector3 direction = nearest - sample;
                direction.Normalize();
                // Двигаем точку на расстояние радиуса в направлении ближайшей точки
                newSamples.Add(sample + direction * radius);
            }
            samples = newSamples;
        }

        return samples;
    }

    private Vector3 FindNearest(Vector3 point, List<Vector3> points)
    {
        Vector3 nearest = points[0];
        float minDistance = Vector3.Distance(point, nearest);
        foreach (var p in points)
        {
            float distance = Vector3.Distance(point, p);
            if (distance < minDistance)
            {
                minDistance = distance;
                nearest = p;
            }
        }
        return nearest;
    }
}

using System.Collections.Generic;
using UnityEngine;

public class Generator : MonoBehaviour
{
    public int width = 100;
    public int height = 100;
    public int numSamples = 30;
    public int relaxationSteps = 5;

    public void Start()
    {
        var samples = GeneratePoissonDiskSamples(width, height, numSamples, relaxationSteps);
        foreach (var sample in samples)
        {
            Debug.Log($"Sample at: {sample}");
            // Здесь вы можете добавить код для размещения объекта кристалла на позиции sample
        }
    }

    public List<Vector3> GeneratePoissonDiskSamples(int width, int height, int numSamples, int relaxationSteps)
    {
        var samples = new List<Vector3>();
        for (int i = 0; i < numSamples; i++)
        {
            // Генерация случайной точки в пределах сетки
            var point = new Vector3(Random.Range(0, width), Random.Range(0, height), 0);
            samples.Add(point);
        }

        for (int _ = 0; _ < relaxationSteps; _++)
        {
            var newSamples = new List<Vector3>();
            foreach (var sample in samples)
            {
                // Находим ближайшую точку
                Vector3 nearest = FindNearest(sample, samples);
                // Вычисляем направление от текущей точки к ближайшей
                Vector3 direction = nearest - sample;
                direction.Normalize();
                // Двигаем точку на расстояние радиуса в направлении ближайшей точки
                newSamples.Add(sample + direction * (width / (float)numSamples));
            }
            samples = newSamples;
        }

        return samples;
    }

    private Vector3 FindNearest(Vector3 point, List<Vector3> points)
    {
        Vector3 nearest = points[0];
        float minDistance = Vector3.Distance(point, nearest);
        foreach (var p in points)
        {
            float distance = Vector3.Distance(point, p);
            if (distance < minDistance)
            {
                minDistance = distance;
                nearest = p;
            }
        }
        return nearest;
    }
}
